Aluno: Renan Guedes Brega.

using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Linq;
using System.Net.WebSockets;
using System.Threading.Tasks;

namespace Lista_Exercicios_03_Arvores
{
    public class Node
    {
        private char valor;
        private Node? left;
        private Node? right; 

        public char Valor{
            get { return valor; }
            set { valor = value;}
        }

        public Node? Left{
            get { return left; }
            set { left = value;}
        }
        public Node? Right{
            get { return right; }
            set { right = value;}
        }

        public Node(char value){
            Valor = value;
            Left = null;
            Right = null;
        }                 
    }
}

using System;
using System.Collections.Generic;
using System.ComponentModel.Design.Serialization;
using System.Linq;
using System.Threading.Tasks;

namespace Lista_Exercicios_03_Arvores
{
    public class Tree
    {
        private Node? root;

        public Node? Root{
            get { return root; }
            set { root = value; }
        }

        public Tree(){
            Root = null;
        }
    }
}

using System.Runtime.InteropServices;
using System.Xml;

namespace Lista_Exercicios_03_Arvores;

class Program
{
    static void Main(string[] args)
    {   
        var arvoreBinaria = new Tree();
        arvoreBinaria.Root = new Node('A');
        arvoreBinaria.Root.Left = new Node('B');
        arvoreBinaria.Root.Right = new Node ('C');
        arvoreBinaria.Root.Right.Left = new Node('D');
        arvoreBinaria.Root.Right.Left.Left = new Node('G');
        arvoreBinaria.Root.Right.Left.Right = new Node('H');
        arvoreBinaria.Root.Right.Right = new Node ('E');
        arvoreBinaria.Root.Right.Right.Left = new Node('I');
        Console.Write("Pré Ordem: ");
        PreOrdem(arvoreBinaria.Root);
        Console.WriteLine();
        Console.Write("In-Ordem: ");
        InOrdem(arvoreBinaria.Root);
        Console.WriteLine();
        Console.Write("Pós Ordem: ");
        PosOrdem(arvoreBinaria.Root);
    }

    public static void PreOrdem(Node? node){
        if(node != null){
            Console.Write($"{node.Valor} ");
            PreOrdem(node.Left);
            PreOrdem(node.Right);
        }
    }

    public static void InOrdem(Node? node){
        if(node != null){
            InOrdem(node.Left);
            Console.Write($"{node.Valor} ");
            InOrdem(node.Right);
        }
    }

    public static void PosOrdem(Node? node){
        if(node != null){
            PosOrdem(node.Left);
            PosOrdem(node.Right);
            Console.Write($"{node.Valor} ");
        }
    }
}